// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Student {
  id                   Int                    @id @default(autoincrement())
  firstName            String
  lastName             String
  fullName             String
  class                Class                  @relation(fields: [classId], references: [id])
  classId              Int
  AssignmentSubmission AssignmentSubmission[]
  studentAttendance    StudentAttendance[]
  studentAccount       StudentAccount[]
}

model Teacher {
  id             Int              @id @default(autoincrement())
  firstName      String
  lastName       String
  fullName       String
  course         Course[]
  teacherAccount TeacherAccount[]
}

model Class {
  id         Int       @id @default(autoincrement())
  name       String
  population Int
  students   Student[]
  courses    Course[]
}

model Course {
  id            Int            @id @default(autoincrement())
  name          String
  imageUrl      String?
  teacher       Teacher        @relation(fields: [teacherId], references: [id])
  teacherId     Int
  class         Class          @relation(fields: [classId], references: [id])
  classId       Int
  subject       Subject        @relation(fields: [subjectId], references: [id])
  subjectId     Int
  conferences   Conference[]
  posts         Post[]
  materialUnits MaterialUnit[]
  mracticeUnits PracticeUnit[]
}

model Exercice {
  id                   Int                   @id @default(autoincrement())
  name                 String
  practiceUnit         PracticeUnit          @relation(fields: [practiceUnitId], references: [id])
  practiceUnitId       Int
  exerciceAttachements ExerciceAttachement[]
  description          String

  isAssignment          Boolean
  deadlineTimestamp     DateTime?
  assignmentSubmissions AssignmentSubmission[]

}

model PracticeUnit {
  id       Int    @id @default(autoincrement())
  title    String
  course   Course @relation(fields: [courseId], references: [id])
  courseId Int

  exercices Exercice[]
}

model Subject {
  id          Int      @id @default(autoincrement())
  name        String
  coefficient Float
  courses     Course[]
}

model CourseMaterial {
  id                   Int                   @id @default(autoincrement())
  name                 String
  url                  String
  materialAttachements MaterialAttachement[]
  materialUnit         MaterialUnit?         @relation(fields: [materialUnitId], references: [id])
  materialUnitId       Int?
}

model MaterialUnit {
  id       Int    @id @default(autoincrement())
  title    String
  course   Course @relation(fields: [courseId], references: [id])
  courseId Int

  courseMaterials CourseMaterial[]
}

model Attachement {
  id                     Int                     @id @default(autoincrement())
  name                   String
  fileExtension          String
  size                   String
  exerciceAttachements   ExerciceAttachement[]
  postAttachements       PostAttachement[]
  materialAttachements   MaterialAttachement[]
  submissionAttachements SubmissionAttachement[]
}

model Conference {
  id                 Int                 @id @default(autoincrement())
  title              String
  status             String
  scheduledStartTime DateTime
  scheduledEndTime   DateTime
  stats              Json
  course             Course              @relation(fields: [courseId], references: [id])
  courseId           Int
  studentAttendances StudentAttendance[]
}

model AssignmentSubmission {
  id                        Int                     @id @default(autoincrement())
  exercice                  Exercice                @relation(fields: [exerciceId], references: [id])
  exerciceId                Int
  student                   Student                 @relation(fields: [studentId], references: [id])
  studentId                 Int
  firstSubmissionTimestamp  DateTime
  latestSubmissionTimestamp DateTime?
  submissionsCount          Int
  submissionAttachements    SubmissionAttachement[]
}

model Post {
  id               Int               @id @default(autoincrement())
  text             String
  publishDate      DateTime
  lastModified     DateTime?
  course           Course            @relation(fields: [courseId], references: [id])
  courseId         Int
  postAttachements PostAttachement[]
}

model Admin {
  id            Int             @id @default(autoincrement())
  firstName     String
  lastName      String
  announcements Announcements[]
  adminAccounts AdminAccount[]
}

model Announcements {
  id        Int      @id @default(autoincrement())
  timestamp DateTime
  topic     String
  admin     Admin    @relation(fields: [adminId], references: [id])
  adminId   Int
}

model Account {
  id              Int              @id @default(autoincrement())
  userName        String
  passwordSalt    String
  passwordHash    String
  relatedUserId   Int
  adminAccounts   AdminAccount[]
  teacherAccounts TeacherAccount[]
  studentAccounts StudentAccount[]
}

model StudentAttendance {
  id           Int        @id @default(autoincrement())
  student      Student    @relation(fields: [studentId], references: [id])
  studentId    Int
  ratio        Float
  conference   Conference @relation(fields: [conferenceId], references: [id])
  conferenceId Int
}

model ExerciceAttachement {
  exercice      Exercice    @relation(fields: [exerciceId], references: [id])
  exerciceId    Int
  attachement   Attachement @relation(fields: [attachementId], references: [id])
  attachementId Int

  @@id([exerciceId, attachementId])
}

model PostAttachement {
  post          Post        @relation(fields: [postId], references: [id])
  postId        Int
  attachement   Attachement @relation(fields: [attachementId], references: [id])
  attachementId Int

  @@id([postId, attachementId])
}

model MaterialAttachement {
  material      CourseMaterial @relation(fields: [materialId], references: [id])
  materialId    Int
  attachement   Attachement    @relation(fields: [attachementId], references: [id])
  attachementId Int

  @@id([materialId, attachementId])
}

model SubmissionAttachement {
  submission    AssignmentSubmission @relation(fields: [submissionId], references: [id])
  submissionId  Int
  attachement   Attachement          @relation(fields: [attachementId], references: [id])
  attachementId Int

  @@id([submissionId, attachementId])
}

model AdminAccount {
  admin     Admin   @relation(fields: [adminId], references: [id])
  adminId   Int
  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  @@id([adminId, accountId])
}

model TeacherAccount {
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId Int
  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  @@id([teacherId, accountId])
}

model StudentAccount {
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int
  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  @@id([studentId, accountId])
}
