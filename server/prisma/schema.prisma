generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Student {
  id                   String                 @id @default(uuid())
  firstName            String
  lastName             String
  fullName             String
  phone                String
  address              String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  classId              String
  class                Class                  @relation(fields: [classId], references: [id])
  AssignmentSubmission AssignmentSubmission[]
  studentAttendance    StudentAttendance[]
  account              emailpassword_users    @relation(fields: [user_id], references: [user_id])
  user_id              String                 @unique
}

model Teacher {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  fullName  String
  phone     String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]

  account emailpassword_users @relation(fields: [user_id], references: [user_id])
  user_id String              @unique

}

model Class {
  id         String    @id @default(uuid())
  name       String
  population Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  courses    Course[]
  students   Student[]
}

model Course {
  id                    String       @id @default(uuid())
  name                  String
  teacherId             String
  classId               String
  subjectId             String
  imageUrl              String?
  isConferenceHappening Boolean      @default(false)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  class                 Class        @relation(fields: [classId], references: [id])
  subject               Subject      @relation(fields: [subjectId], references: [id])
  teacher               Teacher      @relation(fields: [teacherId], references: [id])
  conferences           Conference[]

  // conferences   Conference[]
  materialUnits MaterialUnit[]
  posts         Post[]
  practiceUnits PracticeUnit[]
}

model Exercice {
  id                    String                 @id @default(uuid())
  name                  String
  practiceUnitId        String
  description           String
  isAssignment          Boolean
  deadlineTimestamp     DateTime?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  practiceUnit          PracticeUnit           @relation(fields: [practiceUnitId], references: [id])
  assignmentSubmissions AssignmentSubmission[]
  exerciceAttachements  ExerciceAttachement[]
}

model PracticeUnit {
  id        String     @id @default(uuid())
  title     String
  courseId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  course    Course     @relation(fields: [courseId], references: [id])
  exercices Exercice[]
}

model Subject {
  id          String   @id @default(uuid())
  name        String
  coefficient Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courses     Course[]
}

model CourseMaterial {
  id                   String                @id @default(uuid())
  name                 String
  url                  String
  materialUnitId       String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  materialUnit         MaterialUnit?         @relation(fields: [materialUnitId], references: [id])
  materialAttachements MaterialAttachement[]
}

model MaterialUnit {
  id              String           @id @default(uuid())
  title           String
  courseId        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  course          Course           @relation(fields: [courseId], references: [id])
  courseMaterials CourseMaterial[]
}

model Attachement {
  id                     String                  @id @default(uuid())
  name                   String
  fileExtension          String
  size                   String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  exerciceAttachements   ExerciceAttachement[]
  materialAttachements   MaterialAttachement[]
  postAttachements       PostAttachement[]
  submissionAttachements SubmissionAttachement[]
}

model Conference {
  id                 String              @id @default(uuid())
  title              String
  status             String
  scheduledStartTime DateTime
  scheduledEndTime   DateTime
  stats              Json
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  studentAttendances StudentAttendance[]
  course             Course              @relation(fields: [courseId], references: [id])
  courseId           String              @unique
}

model AssignmentSubmission {
  id                        String                  @id @default(uuid())
  studentId                 String
  submissionsCount          Int
  exerciceId                String
  firstSubmissionTimestamp  DateTime
  latestSubmissionTimestamp DateTime?
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt
  exercice                  Exercice                @relation(fields: [exerciceId], references: [id])
  student                   Student                 @relation(fields: [studentId], references: [id])
  submissionAttachements    SubmissionAttachement[]
}

model Post {
  id               String            @id @default(uuid())
  text             String
  courseId         String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  course           Course            @relation(fields: [courseId], references: [id])
  postAttachements PostAttachement[]
}

model Admin {
  id            String          @id @default(uuid())
  firstName     String
  lastName      String
  phone         String?
  address       String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  announcements Announcements[]
}

model Announcements {
  id        String   @id @default(uuid())
  timestamp DateTime
  topic     String
  adminId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Admin    @relation(fields: [adminId], references: [id])
}

model StudentAttendance {
  id           String     @id @default(uuid())
  studentId    String
  ratio        Float
  conferenceId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  conference   Conference @relation(fields: [conferenceId], references: [id])
  student      Student    @relation(fields: [studentId], references: [id])
}

model ExerciceAttachement {
  exerciceId    String
  attachementId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  attachement   Attachement @relation(fields: [attachementId], references: [id])
  exercice      Exercice    @relation(fields: [exerciceId], references: [id])

  @@id([exerciceId, attachementId])
}

model PostAttachement {
  postId        String
  attachementId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  attachement   Attachement @relation(fields: [attachementId], references: [id])
  post          Post        @relation(fields: [postId], references: [id])

  @@id([postId, attachementId])
}

model MaterialAttachement {
  materialId    String
  attachementId String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  attachement   Attachement    @relation(fields: [attachementId], references: [id])
  material      CourseMaterial @relation(fields: [materialId], references: [id])

  @@id([materialId, attachementId])
}

model SubmissionAttachement {
  submissionId  String
  attachementId String
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  attachement   Attachement          @relation(fields: [attachementId], references: [id])
  submission    AssignmentSubmission @relation(fields: [submissionId], references: [id])

  @@id([submissionId, attachementId])
}

model all_auth_recipe_users {
  user_id     String @id @db.Char(36)
  recipe_id   String @db.VarChar(128)
  time_joined BigInt

  @@index([time_joined, user_id], map: "all_auth_recipe_users_pagination_index")
}

model emailpassword_pswd_reset_tokens {
  user_id             String              @db.Char(36)
  token               String              @unique @db.VarChar(128)
  token_expiry        BigInt
  emailpassword_users emailpassword_users @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, token])
  @@index([token_expiry], map: "emailpassword_password_reset_token_expiry_index")
}

model emailpassword_users {
  user_id                         String                            @id @db.Char(36)
  email                           String                            @unique @db.VarChar(256)
  password_hash                   String                            @db.VarChar(128)
  time_joined                     BigInt
  role                            String?
  emailpassword_pswd_reset_tokens emailpassword_pswd_reset_tokens[]
  teacher                         Teacher?
  student                         Student?
}

model emailverification_tokens {
  user_id      String @db.VarChar(128)
  email        String @db.VarChar(256)
  token        String @unique @db.VarChar(128)
  token_expiry BigInt

  @@id([user_id, email, token])
  @@index([token_expiry], map: "emailverification_tokens_index")
}

model emailverification_verified_emails {
  user_id String @db.VarChar(128)
  email   String @db.VarChar(256)

  @@id([user_id, email])
}

model jwt_signing_keys {
  key_id     String  @id @db.VarChar(255)
  key_string String
  algorithm  String  @db.VarChar(10)
  created_at BigInt?
}

model key_value {
  name            String  @id @db.VarChar(128)
  value           String?
  created_at_time BigInt?
}

model passwordless_codes {
  code_id              String               @id @db.Char(36)
  device_id_hash       String               @db.Char(44)
  link_code_hash       String               @unique @db.Char(44)
  created_at           BigInt
  passwordless_devices passwordless_devices @relation(fields: [device_id_hash], references: [device_id_hash], onDelete: Cascade)

  @@index([created_at], map: "passwordless_codes_created_at_index")
  @@index([device_id_hash], map: "passwordless_codes_device_id_hash_index")
}

model passwordless_devices {
  device_id_hash     String               @id @db.Char(44)
  email              String?              @db.VarChar(256)
  phone_number       String?              @db.VarChar(256)
  link_code_salt     String               @db.Char(44)
  failed_attempts    Int
  passwordless_codes passwordless_codes[]

  @@index([email], map: "passwordless_devices_email_index")
  @@index([phone_number], map: "passwordless_devices_phone_number_index")
}

model passwordless_users {
  user_id      String  @id @db.Char(36)
  email        String? @unique @db.VarChar(256)
  phone_number String? @unique @db.VarChar(256)
  time_joined  BigInt
}

model session_access_token_signing_keys {
  created_at_time BigInt  @id
  value           String?
}

model session_info {
  session_handle       String  @id @db.VarChar(255)
  user_id              String  @db.VarChar(128)
  refresh_token_hash_2 String  @db.VarChar(128)
  session_data         String?
  expires_at           BigInt
  created_at_time      BigInt
  jwt_user_payload     String?
}

model thirdparty_users {
  third_party_id      String @db.VarChar(28)
  third_party_user_id String @db.VarChar(128)
  user_id             String @unique @db.Char(36)
  email               String @db.VarChar(256)
  time_joined         BigInt

  @@id([third_party_id, third_party_user_id])
}

model user_metadata {
  user_id       String @id @db.VarChar(128)
  user_metadata String
}
